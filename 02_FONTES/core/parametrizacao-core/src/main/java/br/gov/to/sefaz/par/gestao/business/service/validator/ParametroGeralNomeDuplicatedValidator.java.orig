package br.gov.to.sefaz.par.gestao.business.service.validator;

import br.gov.to.sefaz.business.service.validation.ServiceValidator;
import br.gov.to.sefaz.business.service.validation.ValidationContext;
import br.gov.to.sefaz.business.service.validation.violation.CustomViolation;
import br.gov.to.sefaz.par.gestao.persistence.entity.ParametroGeral;
import br.gov.to.sefaz.par.gestao.persistence.repository.ParametroGeralRepository;
import br.gov.to.sefaz.util.message.MessageUtil;
import br.gov.to.sefaz.util.message.SourceBundle;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
<<<<<<< 26f2b6b5047d7b7858b62f6867cce61eb9dc134d
 * Validação que verifica se o {@link br.gov.to.sefaz.par.gestao.persistence.entity.ParametroGeral} é estático. Caso seja estático valida se
 * {@link br.gov.to.sefaz.par.gestao.persistence.entity.ParametroGeral#conteudoValores} esteja de acordo com o pattern "codigo,valor|codigo,
 * valor|...".
=======
 * Validação que verifica se o {@link br.gov.to.sefaz.par.gestao.persistence.entity.ParametroGeral} é estático.
 * Caso seja estático valida se {@link br.gov.to.sefaz.par.gestao.persistence.entity.ParametroGeral#conteudoValores}
 * esteja de acordo com o pattern "codigo,valor|codigo,valor|...".
>>>>>>> Desenvolvimento do SEGUC0120 Alterar Senha.
 *
 * @author <a href="mailto:cristiano.luis@ntconsult.com.br">cristiano.luis</a>
 * @since 04/07/2016 10:15:31
 */
@Component
public class ParametroGeralNomeDuplicatedValidator implements ServiceValidator<ParametroGeral> {

    private final ParametroGeralRepository repository;

    @Autowired
    public ParametroGeralNomeDuplicatedValidator(
            ParametroGeralRepository repository) {
        this.repository = repository;
    }

    @Override
    public boolean support(Class<?> clazz, String context) {
<<<<<<< 26f2b6b5047d7b7858b62f6867cce61eb9dc134d
        return clazz.equals(ParametroGeral.class) && (ValidationContext.SAVE.equals(context) || ValidationContext.UPDATE.equals(context));
=======
        return clazz.equals(ParametroGeral.class) && (ValidationContext.SAVE.equals(context)
                || ValidationContext.UPDATE.equals(context));
>>>>>>> Desenvolvimento do SEGUC0120 Alterar Senha.
    }

    @Override
    public Set<CustomViolation> validate(ParametroGeral parametroGeral) {
        HashSet<CustomViolation> customViolations = new HashSet<>();

        List<ParametroGeral> list = repository.findByNome(parametroGeral.getNomeParametroGeral());

        if (CollectionUtils.isNotEmpty(list) && list.stream().filter(p -> !p.getId().equals(parametroGeral.getId()))
                .findAny().isPresent()) {
<<<<<<< 26f2b6b5047d7b7858b62f6867cce61eb9dc134d
            String message = SourceBundle.getMessage(MessageUtil.PAR, "gestao.manutencaoParametros.nomeParametroGeral.duplicated.validator");
=======
            String message = SourceBundle.getMessage(MessageUtil.PAR,
                    "gestao.manutencaoParametros.nomeParametroGeral.duplicated.validator");
>>>>>>> Desenvolvimento do SEGUC0120 Alterar Senha.
            customViolations.add(new CustomViolation(message));
        }

        return customViolations;
    }

}
